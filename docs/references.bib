@article{KUDLEK1996241,
title = {Small deterministic Turing machines},
journal = {Theoretical Computer Science},
volume = {168},
number = {2},
pages = {241-255},
year = {1996},
issn = {0304-3975},
doi = {https://doi.org/10.1016/S0304-3975(96)00078-3},
url = {https://www.sciencedirect.com/science/article/pii/S0304397596000783},
author = {Manfred Kudlek}
}

@article{ROGOZHIN1996215,
title = {Small universal Turing machines},
journal = {Theoretical Computer Science},
volume = {168},
number = {2},
pages = {215-240},
year = {1996},
issn = {0304-3975},
doi = {https://doi.org/10.1016/S0304-3975(96)00077-1},
url = {https://www.sciencedirect.com/science/article/pii/S0304397596000771},
author = {Yurii Rogozhin},
abstract = {Let UTM(m, n) be the class of universal Turing machine with m states and n symbols. Universal Turing machines are proved to exist in the following classes: UTM(24,2), UTM(10,3), UTM(7,4), UTM(5,5), UTM(4,6), UTM(3,10) and UTM(2,18).}
}

@inproceedings{10.1145/3372885.3373816,
author = {Forster, Yannick and Kunze, Fabian and Wuttke, Maximilian},
title = {Verified programming of Turing machines in Coq},
year = {2020},
isbn = {9781450370974},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3372885.3373816},
doi = {10.1145/3372885.3373816},
abstract = {We present a framework for the verified programming of multi-tape Turing machines in Coq. Improving on prior work by Asperti and Ricciotti in Matita, we implement multiple layers of abstraction. The highest layer allows a user to implement nontrivial algorithms as Turing machines and verify their correctness, as well as time and space complexity compositionally. The user can do so without ever mentioning states, symbols on tapes or transition functions: They write programs in an imperative language with registers containing values of encodable data types, and our framework constructs corresponding Turing machines.  As case studies, we verify a translation from multi-tape to single-tape machines as well as a universal Turing machine, both with polynomial time overhead and constant factor space overhead.},
booktitle = {Proceedings of the 9th ACM SIGPLAN International Conference on Certified Programs and Proofs},
pages = {114â€“128},
numpages = {15},
keywords = {Coq, Turing machines, universal machine, verification},
location = {New Orleans, LA, USA},
series = {CPP 2020}
}

@InProceedings{10.1007/978-3-642-32621-9_1,
author="Asperti, Andrea
and Ricciotti, Wilmer",
editor="Ong, Luke
and de Queiroz, Ruy",
title="Formalizing Turing Machines",
booktitle="Logic, Language, Information and Computation",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="1--25",
abstract="We discuss the formalization, in the Matita Theorem Prover, of a few, basic results on Turing Machines, up to the existence of a (certified) Universal Machine. The work is meant to be a preliminary step towards the creation of a formal repository in Complexity Theory, and is a small piece in our Reverse Complexity program, aiming to a comfortable, machine independent axiomatization of the field.",
isbn="978-3-642-32621-9"
}

@Inbook{Kozen2006,
title="The Circuit Value Problem",
bookTitle="Theory of Computation",
year="2006",
publisher="Springer London",
address="London",
pages="30--34",
isbn="978-1-84628-477-9",
doi="10.1007/1-84628-477-5_6",
url="https://doi.org/10.1007/1-84628-477-5_6"
}

