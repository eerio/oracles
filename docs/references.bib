@article{KUDLEK1996241,
title = {Small deterministic Turing machines},
journal = {Theoretical Computer Science},
volume = {168},
number = {2},
pages = {241-255},
year = {1996},
issn = {0304-3975},
doi = {https://doi.org/10.1016/S0304-3975(96)00078-3},
url = {https://www.sciencedirect.com/science/article/pii/S0304397596000783},
author = {Manfred Kudlek}
}

@article{ROGOZHIN1996215,
title = {Small universal Turing machines},
journal = {Theoretical Computer Science},
volume = {168},
number = {2},
pages = {215-240},
year = {1996},
issn = {0304-3975},
doi = {https://doi.org/10.1016/S0304-3975(96)00077-1},
url = {https://www.sciencedirect.com/science/article/pii/S0304397596000771},
author = {Yurii Rogozhin},
abstract = {Let UTM(m, n) be the class of universal Turing machine with m states and n symbols. Universal Turing machines are proved to exist in the following classes: UTM(24,2), UTM(10,3), UTM(7,4), UTM(5,5), UTM(4,6), UTM(3,10) and UTM(2,18).}
}

@inproceedings{10.1145/3372885.3373816,
author = {Forster, Yannick and Kunze, Fabian and Wuttke, Maximilian},
title = {Verified programming of Turing machines in Coq},
year = {2020},
isbn = {9781450370974},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3372885.3373816},
doi = {10.1145/3372885.3373816},
abstract = {We present a framework for the verified programming of multi-tape Turing machines in Coq. Improving on prior work by Asperti and Ricciotti in Matita, we implement multiple layers of abstraction. The highest layer allows a user to implement nontrivial algorithms as Turing machines and verify their correctness, as well as time and space complexity compositionally. The user can do so without ever mentioning states, symbols on tapes or transition functions: They write programs in an imperative language with registers containing values of encodable data types, and our framework constructs corresponding Turing machines.  As case studies, we verify a translation from multi-tape to single-tape machines as well as a universal Turing machine, both with polynomial time overhead and constant factor space overhead.},
booktitle = {Proceedings of the 9th ACM SIGPLAN International Conference on Certified Programs and Proofs},
pages = {114–128},
numpages = {15},
keywords = {Coq, Turing machines, universal machine, verification},
location = {New Orleans, LA, USA},
series = {CPP 2020}
}

@InProceedings{10.1007/978-3-642-32621-9_1,
author="Asperti, Andrea
and Ricciotti, Wilmer",
editor="Ong, Luke
and de Queiroz, Ruy",
title="Formalizing Turing Machines",
booktitle="Logic, Language, Information and Computation",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="1--25",
abstract="We discuss the formalization, in the Matita Theorem Prover, of a few, basic results on Turing Machines, up to the existence of a (certified) Universal Machine. The work is meant to be a preliminary step towards the creation of a formal repository in Complexity Theory, and is a small piece in our Reverse Complexity program, aiming to a comfortable, machine independent axiomatization of the field.",
isbn="978-3-642-32621-9"
}

@Inbook{Kozen2006,
author="Kozen, Dexter C.",
title="The Circuit Value Problem",
bookTitle="Theory of Computation",
year="2006",
publisher="Springer London",
address="London",
pages="30--34",
isbn="978-1-84628-477-9",
doi="10.1007/1-84628-477-5_6",
url="https://doi.org/10.1007/1-84628-477-5_6"
}

@misc{faria2023casestudiesdevelopmentverified,
      title={Case studies of development of verified programs with Dafny for accessibility assessment}, 
      author={João Pascoal Faria and Rui Abreu},
      year={2023},
      eprint={2301.03224},
      archivePrefix={arXiv},
      primaryClass={cs.SE},
      url={https://arxiv.org/abs/2301.03224}, 
}
@article{10.1016/0020-01908790053-6,
author = {Hastad, Johan},
title = {One-way permutations in NC0},
year = {1987},
issue_date = {Nov 1987},
publisher = {Elsevier North-Holland, Inc.},
address = {USA},
volume = {26},
number = {3},
issn = {0020-0190},
url = {https://www.csc.kth.se/~johanh/onewaync0.pdf},
doi = {10.1016/0020-0190(87)90053-6},
journal = {Inf. Process. Lett.},
month = nov,
pages = {153–155},
numpages = {3}
}

@inproceedings{10.1145/258533.258671,
author = {Agrawal, Manindra and Allender, Eric and Impagliazzo, Russell and Pitassi, Toniann and Rudich, Steven},
title = {Reducing the complexity of reductions},
year = {1997},
isbn = {0897918886},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/258533.258671},
howpublished = {https://www.cse.iitk.ac.in/users/manindra/isomorphism/puniform-ac0-iso.pdf},
doi = {10.1145/258533.258671},
booktitle = {Proceedings of the Twenty-Ninth Annual ACM Symposium on Theory of Computing},
pages = {730–738},
numpages = {9},
location = {El Paso, Texas, USA},
series = {STOC '97}
}

@book{Immerman1998-IMMDC,
	author = {Neil Immerman},
	title = {Descriptive Complexity},
	year = {1998},
      isbn = {978-1-4612-0539-5},
      url = {https://doi.org/10.1007/978-1-4612-0539-5},
	publisher = {Springer New York, NY},
      doi = {10.1007/978-1-4612-0539-5},
      pages = {81},
}

@MISC {27676,
    TITLE = {For what c is division by c in AC0?},
    AUTHOR = {daniello (https://cstheory.stackexchange.com/users/27464/daniello)},
    HOWPUBLISHED = {Theoretical Computer Science Stack Exchange},
    NOTE = {URL:https://cstheory.stackexchange.com/q/27676 (version: 2025-01-28)},
    EPRINT = {https://cstheory.stackexchange.com/q/27676},
    URL = {https://cstheory.stackexchange.com/q/27676}
}

@article{doi:10.1137/0213028,
author = {Chandra, Ashok K. and Stockmeyer, Larry and Vishkin, Uzi},
title = {Constant Depth Reducibility},
journal = {SIAM Journal on Computing},
volume = {13},
number = {2},
pages = {423-439},
year = {1984},
doi = {10.1137/0213028},
URL = {https://doi.org/10.1137/0213028},
eprint = {https://doi.org/10.1137/0213028}
}

@misc{BussLectureNotes,
  author = {Samuel Buss},
  howpublished = {https://web.archive.org/web/20220704162258/https://mathweb.ucsd.edu/~sbuss/CourseWeb/Math262A_2013F/Scribe12.pdf},
  title = {Math 262A Lecture Notes, Counting, Threshold, Vector Addition},
  year = {2014}
}

@article{ITA_2001__35_3_259_0,
     author = {Chiu, Andrew and Davida, George and Litow, Bruce},
     title = {Division in logspace-uniform $\mbox{NC}^1$},
     journal = {RAIRO - Theoretical Informatics and Applications - Informatique Th\'eorique et Applications},
     pages = {259--275},
     publisher = {EDP-Sciences},
     volume = {35},
     number = {3},
     year = {2001},
     mrnumber = {1869217},
     zbl = {1014.68062},
     language = {en},
     howpublished = {https://www.numdam.org/item/ITA_2001__35_3_259_0/},
     url = {http://web.archive.org/web/20250115045744/http://www.numdam.org/item/ITA_2001__35_3_259_0.pdf}
}

@article{RUZZO1981365,
title = {On uniform circuit complexity},
journal = {Journal of Computer and System Sciences},
volume = {22},
number = {3},
pages = {365-383},
year = {1981},
issn = {0022-0000},
doi = {https://doi.org/10.1016/0022-0000(81)90038-6},
url = {https://www.sciencedirect.com/science/article/pii/0022000081900386},
author = {Walter L. Ruzzo},
abstract = {We argue that uniform circuit complexity introduced by Borodin is a reasonable model of parallel complexity. Three main results are presented. First, we show that alternating Turing machines are also a surprisingly good model of parallel complexity, by showing that simultaneous size/depth of uniform circuits is the same as space/time of alternating Turing machines, with depth and time within a constant factor and likewise log(size) and space. Second, we apply this to characterize NC, the class of polynomial size and polynomial-in-log depth circuits, in terms of tree-size bounded alternating TMs and other models. In particular, this enables us to show that context-free language recognition is in NC. Third, we investigate various definitions of uniform circuit complexity, showing that it is fairly insensitive to the choice of definition.}
}

@MISC {423885,
    TITLE = {Multi-head two-way finite automata versus logarithmic space},
    AUTHOR = {Damiano Mazza (https://mathoverflow.net/users/45027/damiano-mazza)},
    HOWPUBLISHED = {MathOverflow},
    NOTE = {URL:https://mathoverflow.net/q/423885 (version: 2022-06-03)},
    EPRINT = {https://mathoverflow.net/q/423885},
    URL = {https://mathoverflow.net/q/423885}
}

@article{10.1007/BF00289513,
author = {Hartmanis, Juris},
title = {On non-determinancy in simple computing devices},
year = {1972},
issue_date = {December  1972},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {1},
number = {4},
issn = {0001-5903},
url = {https://doi.org/10.1007/BF00289513},
doi = {10.1007/BF00289513},
abstract = {This paper studies one-tape Turing machines with k read-only heads which are restricted to the original input. The main result shows that if any set accepted by such a 3-head non-deterministic Turing machine can be accepted by a deterministic Turing machine with more read-only heads, then the deterministic and non-deterministic context-sensitive languages are identical. Several related results are derived and some tantalizing open problems are discussed.},
journal = {Acta Inf.},
month = dec,
pages = {336–344},
numpages = {9}
}

@article{10.1002/malq.200310041,
author = {Lee, Troy},
title = {Arithmetical definability over finite structures},
journal = {Mathematical Logic Quarterly},
volume = {49},
number = {4},
pages = {385-392},
keywords = {Arithmetical definability, descriptive complexity, finite model theory, Crane Beach Conjecture},
doi = {https://doi.org/10.1002/malq.200310041},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/malq.200310041},
eprint = {https://web.archive.org/web/20250126110539/http://www1.cs.columbia.edu/~tl2383/arith.pdf},
year = {2003}
}

@misc{hella2023regularrepresentationsuniformtc0,
      title={Regular Representations of Uniform TC^0}, 
      author={Lauri Hella and Juha Kontinen and Kerkko Luosto},
      year={2023},
      eprint={2309.06926},
      archivePrefix={arXiv},
      primaryClass={cs.LO},
      url={https://arxiv.org/abs/2309.06926}, 
}

@article{AGRAWAL2000395,
title = {On TC0, AC0, and Arithmetic Circuits},
journal = {Journal of Computer and System Sciences},
volume = {60},
number = {2},
pages = {395-421},
year = {2000},
issn = {0022-0000},
doi = {https://doi.org/10.1006/jcss.1999.1675},
url = {https://www.sciencedirect.com/science/article/pii/S0022000099916756},
author = {Manindra Agrawal and Eric Allender and Samir Datta},
abstract = {Continuing a line of investigation that has studied the function classes #P, #SAC1, #L, and #NC1, we study the class of functions #AC0. One way to define #AC0 is as the class of functions computed by constant-depth polynomial-size arithmetic circuits of unbounded fan-in addition and multiplication gates. In contrast to the preceding function classes, for which we know to nontrivial lower bounds, lower bounds for #AC0 follow easily from established circuit lower bounds. One of our main results is a characterization of TC0 in terms of #AC0: A language A is in TC0 if and only if there is a #AC0 function f and a number k such that x∈A⇔f(x)=2|x|k. Using the naming conventions of Fenner et al. (1994, J. Comput. System Sci.48, 116–148) and Caussinus et al. (1998, J. Comput. System Sci.57, 200–212), this yieldsTC0=PAC0=C=AC0. Another restatement of this characterization is that TC0 can be simulated by constant-depth arithmetic circuits, with a single threshold gate. We hope that perhaps this characterization of TC0 in terms of AC0 circuits might provide a new avenue of attack for proving lower bounds. Our characterization differs markedly from earlier characterizations of TC0 in terms of arithmetic circuits over finite fields. Using our model of arithmetic circuits, computation over finite fields yields ACC0. We also prove a number of closure properties and normal forms for #AC0.}
}

@INPROCEEDINGS{694595,
  author={Jenner, B. and McKenzie, P. and Toran, J.},
  booktitle={Proceedings. Thirteenth Annual IEEE Conference on Computational Complexity (Formerly: Structure in Complexity Theory Conference) (Cat. No.98CB36247)}, 
  title={A note on the hardness of tree isomorphism}, 
  year={1998},
  volume={},
  number={},
  pages={101-105},
  keywords={Tree graphs;Upper bound;Testing;Polynomials;Circuits;Jacobian matrices;Computer science;Complexity theory;Books;Turing machines},
  doi={10.1109/CCC.1998.694595},
  eprint={https://web.archive.org/web/20211202035456/https://www.uni-ulm.de/fileadmin/website_uni_ulm/iui.inst.190/Mitarbeiter/toran/treeiso.pdf}
}

@article{COOK19852,
title = {A taxonomy of problems with fast parallel algorithms},
journal = {Information and Control},
volume = {64},
number = {1},
pages = {2-22},
year = {1985},
note = {International Conference on Foundations of Computation Theory},
issn = {0019-9958},
doi = {https://doi.org/10.1016/S0019-9958(85)80041-3},
url = {https://www.sciencedirect.com/science/article/pii/S0019995885800413},
eprint = {https://web.archive.org/web/20190320200248/https://core.ac.uk/download/pdf/81978561.pdf},
author = {Stephen A. Cook},
abstract = {The class NC consists of problems solvable very fast (in time polynomial in log n) in parallel with a feasible (polynomial) number of processors. Many natural problems in NC are known; in this paper an attempt is made to identify important subclasses of NC and give interesting examples in each subclass. The notion of NC1-reducibility is introduced and used throughout (problem R is NC1-reducible to problem S if R can be solved with uniform log-depth circuits using oracles for S). Problems complete with respect to this reducibility are given for many of the subclasses of NC. A general technique, the “parallel greedy algorithm,” is identified and used to show that finding a minimum spanning forest of a graph is reducible to the graph accessibility problem and hence is in NC2 (solvable by uniform Boolean circuits of depth O(log2 n) and polynomial size). The class LOGCFL is given a new characterization in terms of circuit families. The class DET of problems reducible to integer determinants is defined and many examples given. A new problem complete for deterministic polynomial time is given, namely, finding the lexicographically first maximal clique in a graph. This paper is a revised version of S. A. Cook, (1983, in “Proceedings 1983 Intl. Found. Comut. Sci. Conf.,” Lecture Notes in Computer Science Vol. 158, pp. 78–93, Springer-Verlag, Berlin/New York).}
}

@article{COOK1987385,
title = {Problems complete for deterministic logarithmic space},
journal = {Journal of Algorithms},
volume = {8},
number = {3},
pages = {385-394},
year = {1987},
issn = {0196-6774},
doi = {https://doi.org/10.1016/0196-6774(87)90018-6},
url = {https://www.sciencedirect.com/science/article/pii/0196677487900186},
eprint = {https://web.archive.org/web/20161213142928/https://www.cs.utoronto.ca/~sacook/homepage/cook_mckenzie.pdf},
author = {Stephen A Cook and Pierre McKenzie},
abstract = {We exhibit several problems complete for deterministic logarithmic space under NC1 (i.e., log depth) reducibility. The list includes breadth-first search and depth-first search of an undirected tree, connectivity of undirected graphs known to be made up of one or more disjoint cycles, undirected graph acyclicity, and several problems related to representing and to operating with permutations of a finite set.}
}


